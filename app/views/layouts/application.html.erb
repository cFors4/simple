<!-- app/views/layouts/application.html.erb -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
  <title><%= @title.present? ? "#{@title} | MinMaxFlow" : "MinMaxFlow" %></title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= favicon_link_tag 'favicon.png' %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
  <title>Connor Forsyth</title>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <style>
    body {
      font-family: 'Courier New', Courier, monospace;
      line-height: 1.6;
      color: #e0e0e0;
      margin: 0;
      padding: 0;
      background-color: #000000;
      font-size: 16px;
    }
    /* Minimap styles */
    #minimap {
      position: fixed;
      top: 20px;
      right: 20px;
      width: 12vw;
      max-width: 300px;
      min-width: 150px;
      height: 24vw;
      max-height: 600px;
      min-height: 300px;
      background-color: rgba(30, 30, 30, 0.8);
      border: 1px solid #64b5f6;
      border-radius: 5px;
      overflow: hidden;
      z-index: 1000;
    }
    #minimap-content {
      transform-origin: top left;
      transition: transform 0.1s ease-out;
      position: absolute;
      top: 0;
      left: 0;
    }
    /* Adjust minimap size for different screen widths */
    @media (min-width: 1921px) {
      #minimap {
        width: 15vw;
        height: 30vw;
        max-width: 400px;
        max-height: 800px;
      }
    }
    @media (max-width: 1920px) and (min-width: 1201px) {
      #minimap {
        width: 14vw;
        height: 28vw;
        max-width: 350px;
        max-height: 700px;
      }
    }
    @media (max-width: 1200px) and (min-width: 769px) {
      #minimap {
        width: 15vw;
        height: 30vw;
        max-width: 250px;
        max-height: 500px;
      }
    }
    /* Hide minimap on mobile */
    @media (max-width: 768px) {
      #minimap {
        display: none;
      }
    }
    /* Highlight visible area in minimap */
    #minimap-visible-area {
      position: absolute;
      background-color: rgba(100, 181, 246, 0.3);
      pointer-events: none;
    }
    #minimap:hover #minimap-visible-area {
      background-color: rgba(100, 181, 246, 0.5);
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 20px;
    }
    h1, h2 {
      margin-top: 1.5em;
      color: #ffffff;
      font-weight: 600;
    }
    h1 {
      font-size: 2em;
      margin: 0;
    }
    h2 {
      font-size: 1.5em;
      margin-bottom: 0.5em;
    }
    a {
      color: #64b5f6;
      text-decoration: none;
      transition: color 0.3s ease;
    }
    a:hover {
      color: #90caf9;
      text-decoration: underline;
    }
    .section {
      margin-bottom: 3em;
    }
    .links a {
      display: block;
      margin-bottom: 0.8em;
      padding: 10px;
      background-color: rgba(100, 181, 246, 0.1);
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }
    .links a:hover {
      background-color: rgba(100, 181, 246, 0.2);
    }
    .who-am-i-content {
      display: flex;
      align-items: center;
      gap: 40px;
    }
    .who-am-i-text {
      flex: 1;
    }
    .headshot {
      flex-shrink: 0;
      width: 200px;
      height: 200px;
      border-radius: 50%;
      overflow: hidden;
      border: 3px solid #64b5f6;
      box-shadow: 0 0 20px rgba(100, 181, 246, 0.3);
      margin-top: 60px;
    }
    .headshot img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    @media (max-width: 768px) {
      .who-am-i-content {
        flex-direction: column;
        align-items: center;
      }
      .headshot {
        order: -1;
        margin-bottom: 20px;
        margin-top: 0;
      }
    }
    .header-buttons {
      display: flex;
      align-items: center;
    }
    .cta-button {
      background-color: #64b5f6;
      color: #000000;
      border: none;
      padding: 10px 15px;
      cursor: pointer;
      font-size: 14px;
      border-radius: 5px;
      transition: all 0.3s ease;
      text-decoration: none;
      margin-right: 15px;
      white-space: nowrap;
      display: inline-block;
    }
    .cta-button:hover {
      background-color: #90caf9;
      color: #000000;
      text-decoration: none;
    }
    @media (max-width: 768px) {
      .cta-button {
        padding: 8px 12px;
        font-size: 12px;
      }
    }
    .menu-btn {
      background: none;
      border: none;
      font-size: 1.5em;
      color: #ffffff;
      cursor: pointer;
      padding: 0;
      line-height: 1;
    }
    header {
      margin-bottom: 30px;
      position: sticky;
      top: 0;
      background-color: #000000;
      z-index: 1000;
      padding: 15px 0;
    }
    .header-content {
      display: flex;
      align-items: center;
      justify-content: space-between;
      flex-wrap: wrap;
    }
    .header-left {
      display: flex;
      align-items: center;
    }
    .header-left h1 {
      margin-left: 15px;
    }
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        align-items: flex-start;
      }
      .header-left {
        width: 100%;
        margin-bottom: 10px;
      }
      .header-left h1 {
        font-size: 1.5em;
      }
      .header-buttons {
        width: 100%;
        display: flex;
        justify-content: flex-end;
      }
    }
    nav {
      display: none;
      background-color: #1e1e1e;
      padding: 10px;
      border-radius: 5px;
      margin-top: 15px;
    }
    nav ul {
      list-style-type: none;
      padding: 0;
      margin: 0;
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
    }
    nav ul li {
      margin: 5px 10px;
    }
    nav ul li a {
      padding: 5px 10px;
      border-radius: 5px;
    }
    nav ul li a:hover, nav ul li a.active {
      background-color: rgba(100, 181, 246, 0.2);
    }
    @media (max-width: 768px) {
      nav ul {
        flex-direction: column;
      }
      nav ul li {
        margin-bottom: 10px;
      }
    }
    #donate-button {
      background-color: #64b5f6;
      color: #000000;
      border: none;
      padding: 10px 20px;
      cursor: pointer;
      font-size: 16px;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }
    #donate-button:hover {
      background-color: #90caf9;
    }
    .goals-section {
      background-color: #111111;
      padding: 20px;
      border-radius: 5px;
    }
    .goal {
      margin-bottom: 20px;
    }
    .goal-title {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    .goal-list {
      list-style-type: none;
      padding-left: 0;
    }
    .goal-list li {
      margin-bottom: 5px;
    }
    .completion {
      font-size: 0.9em;
      color: #64b5f6;
    }
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="header-content">
        <div class="header-left">
          <button class="menu-btn" onclick="toggleMenu()">â˜°</button>
          <h1><a href="/" style="color: inherit; text-decoration: none;">Connor Forsyth @ MinMaxFlow</a></h1>
        </div>
        <div class="header-buttons">
          <a href="<%= root_path(anchor: 'how') %>" class="cta-button">I'm ready to grow</a>
        </div>
      </div>
      <nav id="main-nav">
        <ul>
          <li><a href="#who-am-i">Who Am I</a></li>
          <li><a href="#minmaxflow">What is MinMaxFlow</a></li>
          <li><a href="#together">What we can do together</a></li>
          <li><a href="#how">How we can do it</a></li>
          <li><a href="#learn-more">Learn from socialmedia content</a></li>
          <li><a href="#discussion">Open a discussion with me</a></li>
          <li><a href="#documentation">Public Documentation</a></li>
          <li><a href="#feedback">Feedback</a></li>
          <li><a href="#donate">Donate</a></li>
        </ul>
      </nav>
    </header>

    <main>
      <%= yield %>
    </main>

    <footer>
      <p>&copy; <%= Time.current.year %> Connor Forsyth. All rights reserved.</p>
    </footer>
  </div>


  <%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %>

  <script>
    function toggleMenu() {
      const nav = document.getElementById('main-nav');
      nav.style.display = nav.style.display === 'none' || nav.style.display === '' ? 'block' : 'none';
    }

    // Ensure the menu is collapsed on page load for all devices
    document.addEventListener('DOMContentLoaded', function() {
      const nav = document.getElementById('main-nav');
      nav.style.display = 'none';
    });

    function copyBitcoinAddress(e) {
      e.preventDefault();
      const bitcoinAddress = 'bc1qhv8ywesrym9q6dm88q47fnh9vjyqzaflsfr9s9';
      navigator.clipboard.writeText(bitcoinAddress).then(() => {
        alert('Bitcoin address copied to clipboard!');
      }).catch(err => {
        console.error('Failed to copy: ', err);
      });
    }

    function smoothScroll(targetId) {
      const targetElement = document.getElementById(targetId);
      
      if (targetElement) {
        const headerHeight = document.querySelector('header').offsetHeight;
        const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
        const offsetPosition = targetPosition - headerHeight - 40; // Increased spacing to 40px

        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        });
      }
    }

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const targetId = this.getAttribute('href').substring(1);
        smoothScroll(targetId);
      });
    });

    // Add event listener for the "I'm ready to grow" button
    document.querySelector('.cta-button').addEventListener('click', function(e) {
      e.preventDefault();
      const targetHref = this.getAttribute('href');
      const targetPath = targetHref.split('#')[0];
      const targetAnchor = targetHref.split('#')[1];

      if (window.location.pathname === targetPath) {
        smoothScroll(targetAnchor);
      } else {
        // If we're not on the home page, we need to navigate and then scroll
        sessionStorage.setItem('scrollToSection', targetAnchor);
        window.location.href = targetHref;
      }
    });

    // Check for stored scroll target on page load
    document.addEventListener('DOMContentLoaded', function() {
      const scrollToSection = sessionStorage.getItem('scrollToSection');
      if (scrollToSection) {
        sessionStorage.removeItem('scrollToSection');
        setTimeout(() => smoothScroll(scrollToSection), 100);
      }
    });

    function setActiveMenuItem() {
      const sections = document.querySelectorAll('section');
      const navItems = document.querySelectorAll('nav ul li a');

      sections.forEach(section => {
        const rect = section.getBoundingClientRect();
        if (rect.top <= 150 && rect.bottom >= 150) {
          const id = section.getAttribute('id');
          navItems.forEach(item => {
            item.classList.remove('active');
            if (item.getAttribute('href') === `#${id}`) {
              item.classList.add('active');
            }
          });
        }
      });
    }

    window.addEventListener('scroll', setActiveMenuItem);
    window.addEventListener('load', setActiveMenuItem);
  </script>

  <div id="minimap">
    <div id="minimap-content"></div>
  </div>

  <script>
    // Minimap functionality
    document.addEventListener('DOMContentLoaded', function() {
      const minimap = document.getElementById('minimap');
      const minimapContent = document.getElementById('minimap-content');
      const content = document.body;

      // Create visible area element
      const visibleArea = document.createElement('div');
      visibleArea.id = 'minimap-visible-area';
      minimap.appendChild(visibleArea);

      function updateMinimap() {
        const contentHeight = Math.max(content.scrollHeight, window.innerHeight);
        const contentWidth = document.querySelector('.container').offsetWidth;
        const scaleX = minimap.offsetWidth / contentWidth;
        const scaleY = minimap.offsetHeight / contentHeight;
        const scale = Math.min(scaleX, scaleY);

        minimapContent.style.transform = `scale(${scale})`;
        minimapContent.style.width = `${contentWidth}px`;
        minimapContent.style.height = `${contentHeight}px`;

        // Clone the content and remove the minimap from the clone
        const contentClone = content.cloneNode(true);
        const minimapInClone = contentClone.querySelector('#minimap');
        if (minimapInClone) {
          minimapInClone.remove();
        }
        minimapContent.innerHTML = contentClone.innerHTML;

        // Center the content horizontally in the minimap
        const scaledContentWidth = contentWidth * scale;
        const horizontalOffset = (minimap.offsetWidth - scaledContentWidth) / 2;
        minimapContent.style.left = `${horizontalOffset}px`;

        // Ensure minimap aspect ratio matches content
        const contentAspectRatio = contentWidth / contentHeight;
        const minimapWidth = minimap.offsetWidth;
        const calculatedHeight = minimapWidth / contentAspectRatio;
    
        // Apply min and max height constraints
        const minHeight = parseInt(window.getComputedStyle(minimap).minHeight);
        const maxHeight = parseInt(window.getComputedStyle(minimap).maxHeight);
        minimap.style.height = `${Math.max(minHeight, Math.min(calculatedHeight, maxHeight))}px`;

        updateVisibleArea();
      }

      function updateVisibleArea() {
        const contentHeight = Math.max(content.scrollHeight, window.innerHeight);
        const contentWidth = document.querySelector('.container').offsetWidth;
        const scrollPercentage = window.pageYOffset / (contentHeight - window.innerHeight);
        const visibleAreaTop = scrollPercentage * (minimap.offsetHeight - visibleArea.offsetHeight);
      
        visibleArea.style.top = `${visibleAreaTop}px`;
        visibleArea.style.height = `${(window.innerHeight / contentHeight) * minimap.offsetHeight}px`;
      
        // Adjust visible area width to match the scaled content width
        const scaleX = minimap.offsetWidth / contentWidth;
        const scaledContentWidth = contentWidth * scaleX;
        visibleArea.style.width = `${scaledContentWidth}px`;
      
        // Center the visible area horizontally
        const horizontalOffset = (minimap.offsetWidth - scaledContentWidth) / 2;
        visibleArea.style.left = `${horizontalOffset}px`;
      }

      function updateVisibleArea() {
        const contentHeight = Math.max(content.scrollHeight, window.innerHeight);
        const scrollPercentage = window.pageYOffset / (contentHeight - window.innerHeight);
        const visibleAreaTop = scrollPercentage * (minimap.offsetHeight - visibleArea.offsetHeight);
        
        visibleArea.style.top = `${visibleAreaTop}px`;
        visibleArea.style.height = `${(window.innerHeight / contentHeight) * minimap.offsetHeight}px`;
        visibleArea.style.width = `${minimap.offsetWidth}px`;
      }

      function scrollToPosition(y) {
        const contentHeight = Math.max(content.scrollHeight, window.innerHeight);
        const scrollPercentage = y / minimap.offsetHeight;
        const scrollTarget = scrollPercentage * (contentHeight - window.innerHeight);
        window.scrollTo(0, scrollTarget);
      }

      updateMinimap();
      window.addEventListener('resize', updateMinimap);
      window.addEventListener('scroll', updateVisibleArea);

      // Click on minimap to scroll
      minimap.addEventListener('mousedown', function(e) {
        e.preventDefault();
        scrollToPosition(e.clientY - minimap.getBoundingClientRect().top);

        function mouseMoveHandler(e) {
          scrollToPosition(e.clientY - minimap.getBoundingClientRect().top);
        }

        function mouseUpHandler() {
          document.removeEventListener('mousemove', mouseMoveHandler);
          document.removeEventListener('mouseup', mouseUpHandler);
        }

        document.addEventListener('mousemove', mouseMoveHandler);
        document.addEventListener('mouseup', mouseUpHandler);
      });

      // Update minimap on window resize
      let resizeTimer;
      window.addEventListener('resize', function() {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(updateMinimap, 250);
      });
    });
  </script>
</body>
</html>
