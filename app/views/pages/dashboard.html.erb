<div class="<%= @page_class %>">
  <h1>MinMax Dashboard</h1>
  
  <nav class="dashboard-tabs">
    <button id="prevTab" class="nav-arrow">&larr;</button>
    <ul>
      <li data-tab="aware-agency">Aware Agency</li>
      <li data-tab="flow">Flow</li>
      <li data-tab="build">Build</li>
      <li data-tab="become">Become</li>
      <li data-tab="be">Be</li>
    </ul>
    <button id="nextTab" class="nav-arrow">&rarr;</button>
  </nav>

  <div class="dashboard-content">
    <div id="aware-agency" class="tab-content active">
      <%= render partial: 'pages/dashboard_aware_agency' %>
    </div>
    <div id="flow" class="tab-content">
      <%= render partial: 'pages/dashboard_flow' %>
    </div>
    <div id="build" class="tab-content">
      <%= render partial: 'pages/dashboard_build' %>
    </div>
    <div id="become" class="tab-content">
      <%= render partial: 'pages/dashboard_become' %>
    </div>
    <div id="be" class="tab-content">
      <%= render partial: 'pages/dashboard_be' %>
    </div>
  </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  let isInitialized = false;

  function initializeDashboard() {
    if (isInitialized) return;
    isInitialized = true;

    const tabs = document.querySelectorAll('.dashboard-tabs li');
    const tabContents = document.querySelectorAll('.tab-content');
    const prevButton = document.getElementById('prevTab');
    const nextButton = document.getElementById('nextTab');
    const contextSection = document.getElementById('context-section');
    let currentTabIndex = parseInt(localStorage.getItem('currentTabIndex')) || 0;

    function updateActiveTab() {
      tabs.forEach((tab, index) => {
        if (index === currentTabIndex) {
          tab.classList.add('active');
          tabContents[index].classList.add('active');
          initializeSideMenu(tab.getAttribute('data-tab'));
        } else {
          tab.classList.remove('active');
          tabContents[index].classList.remove('active');
        }
      });
      localStorage.setItem('currentTabIndex', currentTabIndex);
    }

    prevButton.addEventListener('click', function() {
      currentTabIndex = (currentTabIndex - 1 + tabs.length) % tabs.length;
      updateActiveTab();
    });

    nextButton.addEventListener('click', function() {
      currentTabIndex = (currentTabIndex + 1) % tabs.length;
      updateActiveTab();
    });

    tabs.forEach((tab, index) => {
      tab.addEventListener('click', function() {
        currentTabIndex = index;
        updateActiveTab();
      });
    });

    updateActiveTab();

    // Diamond square click handling
    const diamondSquares = document.querySelectorAll('.diamond-square');
    diamondSquares.forEach(square => {
      square.addEventListener('click', function() {
        const tabName = this.getAttribute('data-tab');
        const tabIndex = Array.from(tabs).findIndex(tab => tab.getAttribute('data-tab') === tabName);
        if (tabIndex !== -1) {
          currentTabIndex = tabIndex;
          updateActiveTab();
        }
      });
    });

    // Function to update percentages (placeholder)
    function updatePercentages() {
      const overallPercentage = document.getElementById('overallPercentage');
      const squarePercentages = document.querySelectorAll('.square-percentage');
      
      // Placeholder: Generate random percentages
      const randomPercentage = () => Math.floor(Math.random() * 101);
      
      overallPercentage.textContent = randomPercentage();
      squarePercentages.forEach(span => {
        span.textContent = `${randomPercentage()}%`;
      });
    }

    // Update percentages on page load (for demonstration)
    updatePercentages();

    // Initialize flow and be dashboard states
    initializeFlowDashboard();
    initializeBeDashboard();
  }

  function getHeaderOffset() {
    const header = document.querySelector('.dashboard-tabs');
    return header ? header.offsetHeight : 0;
  }

  function initializeSideMenu(tabId) {
    console.log(`Initializing side menu for ${tabId}...`);
    const tabContent = document.getElementById(tabId);
    const menuLinks = tabContent.querySelectorAll('.floating-side-menu a');
    console.log('Number of menu links:', menuLinks.length);
    menuLinks.forEach(link => {
      console.log('Link href:', link.getAttribute('href'));
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = tabContent.querySelector(`#${targetId}`);
        if (targetElement) {
          console.log('Scrolling to:', targetId);
          const headerOffset = getHeaderOffset();
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        } else {
          console.log('Target element not found:', targetId);
        }
      });
    });
  }

  function initializeAllSideMenus() {
    const tabIds = ['aware-agency', 'flow', 'build', 'become', 'be'];
    tabIds.forEach(tabId => initializeSideMenu(tabId));
  }

  // Call initializeDashboard when the page loads
  document.addEventListener('DOMContentLoaded', initializeDashboard);

  // Re-initialize side menus when switching tabs
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.dashboard-tabs li');
    tabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabId = this.getAttribute('data-tab');
        initializeSideMenu(tabId);
      });
    });
  });

  function initializeFlowDashboard() {
    const flowHeuristics = document.querySelectorAll('#flow .flow-heuristic input');
    const flowPercentage = document.getElementById('flowPercentage');
    const progressTriangle = document.getElementById('progressTriangle');
    const vibrantPercentage = document.getElementById('vibrantPercentage');
    const priorityPercentage = document.getElementById('priorityPercentage');
    const bottleneckPercentage = document.getElementById('bottleneckPercentage');

    function updateFlowDashboard() {
      let total = 0;
      flowHeuristics.forEach((heuristic, index) => {
        total += parseInt(heuristic.value);
        heuristic.nextElementSibling.textContent = heuristic.value + '%';
      });
      const average = total / flowHeuristics.length;
      flowPercentage.textContent = Math.round(average) + '%';

      // Update the triangle
      const height = 180 * (average / 100);
      progressTriangle.setAttribute('points', `100,10 ${100 - height / 2},${10 + height} ${100 + height / 2},${10 + height}`);

      // Update other metrics
      vibrantPercentage.textContent = Math.round(average);
      priorityPercentage.textContent = Math.round(Math.random() * 100);
      bottleneckPercentage.textContent = Math.round(Math.random() * 100);
    }

    flowHeuristics.forEach(heuristic => {
      heuristic.addEventListener('input', updateFlowDashboard);
    });

    updateFlowDashboard();

    // Flow Goal functionality
    const flowGoalInput = document.getElementById('flowGoal');
    const currentFlowGoal = document.getElementById('currentFlowGoal');
    const saveGoalButton = document.querySelector('#flow button');

    function saveFlowGoal() {
      const goal = flowGoalInput.value;
      if (goal) {
        currentFlowGoal.textContent = `Current Goal: ${goal}`;
        localStorage.setItem('flowGoal', goal);
      }
    }

    // Load saved goal on page load
    const savedGoal = localStorage.getItem('flowGoal');
    if (savedGoal) {
      currentFlowGoal.textContent = `Current Goal: ${savedGoal}`;
    }

    saveGoalButton.addEventListener('click', saveFlowGoal);
  }

  function initializeBeDashboard() {
    const beHeuristics = document.querySelectorAll('#be .heuristic input');
    const centerPercentage = document.getElementById('centerPercentage');
    const progressCircle = document.getElementById('progressCircle');
    const centeredPercentage = document.getElementById('centeredPercentage');
    const realisedPercentage = document.getElementById('realisedPercentage');
    const mindfulnessPercentage = document.getElementById('mindfulnessPercentage');

    function updateBeDashboard() {
      let total = 0;
      beHeuristics.forEach((heuristic, index) => {
        total += parseInt(heuristic.value);
        heuristic.nextElementSibling.textContent = heuristic.value + '%';
      });
      const average = total / beHeuristics.length;
      centerPercentage.textContent = Math.round(average) + '%';

      // Update the circle
      const circumference = 2 * Math.PI * 90;
      const offset = circumference - (average / 100) * circumference;
      progressCircle.style.strokeDashoffset = offset;

      // Update other metrics
      centeredPercentage.textContent = Math.round(average);
      realisedPercentage.textContent = Math.round(Math.random() * 100);
      mindfulnessPercentage.textContent = Math.round((total / (beHeuristics.length * 100)) * 100);
    }

    beHeuristics.forEach(heuristic => {
      heuristic.addEventListener('input', updateBeDashboard);
    });

    updateBeDashboard();
  }
</script>

<style>
  .dashboard-tabs {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
  }

  .dashboard-tabs ul {
    display: flex;
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .dashboard-tabs li {
    margin: 0 10px;
    padding: 10px;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    color: #ffffff;
  }

  .dashboard-tabs li.active {
    border-bottom-color: #64b5f6;
  }

  .nav-arrow {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 0 10px;
    color: #ffffff;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .flow-visualization {
    margin-top: 30px;
  }

  #flowChart {
    max-width: 600px;
    margin: 0 auto;
  }

  .flow-form {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: white;
    padding: 20px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    max-height: 60vh;
    overflow-y: auto;
    z-index: 1000;
    transform: translateY(100%);
    transition: transform 0.3s ease-out;
  }

  .flow-form.show {
    transform: translateY(0);
  }

  .flow-form-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
  }

  .flow-form-overlay.show {
    opacity: 1;
    visibility: visible;
  }

  .overall-percentage {
    text-align: center;
    font-size: 24px;
    margin-bottom: 20px;
  }

  .diamond-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    gap: 60px; /* Increased from 40px to 60px */
    width: 400px; /* Increased from 340px to accommodate the larger gap */
    height: 400px; /* Increased from 340px to accommodate the larger gap */
    margin: 40px auto;
  }

  .diamond-square {
    width: 140px; /* Decreased from 150px */
    height: 140px; /* Decreased from 150px */
    background-color: #2c2c2c;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transform: rotate(45deg);
    cursor: pointer;
    transition: background-color 0.3s;
    color: #ffffff;
  }

  .diamond-square:nth-child(1) { /* Flow */
    grid-column: 1 / 3;
    grid-row: 1 / 2;
    justify-self: center;
    align-self: start;
  }

  .diamond-square:nth-child(2) { /* Build */
    grid-column: 2 / 3;
    grid-row: 1 / 3;
    justify-self: end;
    align-self: center;
  }

  .diamond-square:nth-child(3) { /* Become */
    grid-column: 1 / 3;
    grid-row: 2 / 3;
    justify-self: center;
    align-self: end;
  }

  .diamond-square:nth-child(4) { /* Be */
    grid-column: 1 / 2;
    grid-row: 1 / 3;
    justify-self: start;
    align-self: center;
  }

  .diamond-square span {
    transform: rotate(-45deg);
    text-align: center;
  }

  .square-title {
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 0.8rem; /* Decreased from 0.9rem */
  }

  .square-percentage {
    font-size: 1.1rem; /* Decreased from 1.2rem */
  }

  .ceim-image {
    display: block;
    max-width: 100%;
    height: auto;
    margin: 20px auto;
  }
</style>
