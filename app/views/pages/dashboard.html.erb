<div class="<%= @page_class %>">
  <h1>MinMax Dashboard</h1>
  
  <nav class="dashboard-tabs">
    <button id="prevTab" class="nav-arrow">&larr;</button>
    <ul>
      <li data-tab="aware-agency">Aware Agency</li>
      <li data-tab="flow">Flow</li>
      <li data-tab="build">Build</li>
      <li data-tab="become">Become</li>
      <li data-tab="be">Be</li>
    </ul>
    <button id="nextTab" class="nav-arrow">&rarr;</button>
  </nav>

  <div class="dashboard-content">
    <div id="aware-agency" class="tab-content active">
      <h2>Aware Agency</h2>
      <div class="overall-percentage">Overall: <span id="overallPercentage">0</span>%</div>
      <div class="diamond-container">
        <div class="diamond-square" data-tab="flow">
          <span class="square-title">Flow</span>
          <span class="square-percentage">0%</span>
        </div>
        <div class="diamond-square" data-tab="build">
          <span class="square-title">Build</span>
          <span class="square-percentage">0%</span>
        </div>
        <div class="diamond-square" data-tab="become">
          <span class="square-title">Become</span>
          <span class="square-percentage">0%</span>
        </div>
        <div class="diamond-square" data-tab="be">
          <span class="square-title">Be</span>
          <span class="square-percentage">0%</span>
        </div>
      </div>
    </div>
    <div id="flow" class="tab-content">
      <%= render partial: 'pages/dashboard_flow' %>
      <div class="flow-visualization">
        <h3>Flow Visualization</h3>
        <div id="flowChart"></div>
      </div>
    </div>
    <div id="build" class="tab-content">
      <%= render partial: 'pages/dashboard_build' %>
    </div>
    <div id="become" class="tab-content">
      <%= render partial: 'pages/dashboard_become' %>
    </div>
    <div id="be" class="tab-content">
      <%= render partial: 'pages/dashboard_be' %>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.dashboard-tabs li');
    const tabContents = document.querySelectorAll('.tab-content');
    const prevButton = document.getElementById('prevTab');
    const nextButton = document.getElementById('nextTab');
    let currentTabIndex = parseInt(localStorage.getItem('currentTabIndex')) || 0;

    function updateActiveTab() {
      tabs.forEach((tab, index) => {
        if (index === currentTabIndex) {
          tab.classList.add('active');
          tabContents[index].classList.add('active');
        } else {
          tab.classList.remove('active');
          tabContents[index].classList.remove('active');
        }
      });
      localStorage.setItem('currentTabIndex', currentTabIndex);
    }

    prevButton.addEventListener('click', function() {
      currentTabIndex = (currentTabIndex - 1 + tabs.length) % tabs.length;
      updateActiveTab();
    });

    nextButton.addEventListener('click', function() {
      currentTabIndex = (currentTabIndex + 1) % tabs.length;
      updateActiveTab();
    });

    tabs.forEach((tab, index) => {
      tab.addEventListener('click', function() {
        currentTabIndex = index;
        updateActiveTab();
      });
    });

    updateActiveTab();

    // Diamond square click handling
    const diamondSquares = document.querySelectorAll('.diamond-square');
    diamondSquares.forEach(square => {
      square.addEventListener('click', function() {
        const tabName = this.getAttribute('data-tab');
        const tabIndex = Array.from(tabs).findIndex(tab => tab.getAttribute('data-tab') === tabName);
        if (tabIndex !== -1) {
          currentTabIndex = tabIndex;
          updateActiveTab();
        }
      });
    });

    // Flow chart
    const ctx = document.getElementById('flowChart').getContext('2d');
    new Chart(ctx, {
      type: 'bar',
      data: {
        labels: ['Work', 'Personal', 'Health', 'Other'],
        datasets: [{
          label: 'Number of Flows',
          data: [0, 0, 0, 0],
          backgroundColor: [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)'
          ],
          borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Form handling
    const addFlowButton = document.querySelector('.add-flow-button');
    const flowForm = document.querySelector('.flow-form');
    const closeFormButton = document.querySelector('.close-form');

    function showForm() {
      flowForm.classList.add('show');
      document.body.insertAdjacentHTML('beforeend', '<div class="flow-form-overlay"></div>');
      setTimeout(() => {
        document.querySelector('.flow-form-overlay').classList.add('show');
      }, 10);
      document.addEventListener('click', handleOutsideClick);
    }

    function hideForm() {
      flowForm.classList.remove('show');
      const overlay = document.querySelector('.flow-form-overlay');
      if (overlay) {
        overlay.classList.remove('show');
        setTimeout(() => {
          overlay.remove();
        }, 300);
      }
      document.removeEventListener('click', handleOutsideClick);
    }

    function handleOutsideClick(event) {
      if (!flowForm.contains(event.target) && !addFlowButton.contains(event.target)) {
        hideForm();
      }
    }

    addFlowButton.addEventListener('click', function(event) {
      event.stopPropagation();
      showForm();
    });

    closeFormButton.addEventListener('click', hideForm);

    flowForm.addEventListener('click', function(event) {
      event.stopPropagation();
    });

    // Function to update percentages (placeholder)
    function updatePercentages() {
      const overallPercentage = document.getElementById('overallPercentage');
      const squarePercentages = document.querySelectorAll('.square-percentage');
      
      // Placeholder: Generate random percentages
      const randomPercentage = () => Math.floor(Math.random() * 101);
      
      overallPercentage.textContent = randomPercentage();
      squarePercentages.forEach(span => {
        span.textContent = `${randomPercentage()}%`;
      });
    }

    // Update percentages on page load (for demonstration)
    updatePercentages();
  });
</script>

<style>
  .dashboard-tabs {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 20px;
  }

  .dashboard-tabs ul {
    display: flex;
    list-style-type: none;
    padding: 0;
    margin: 0;
  }

  .dashboard-tabs li {
    margin: 0 10px;
    padding: 10px;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    color: #ffffff;
  }

  .dashboard-tabs li.active {
    border-bottom-color: #64b5f6;
  }

  .nav-arrow {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 0 10px;
    color: #ffffff;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .flow-visualization {
    margin-top: 30px;
  }

  #flowChart {
    max-width: 600px;
    margin: 0 auto;
  }

  .flow-form {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: white;
    padding: 20px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    max-height: 60vh;
    overflow-y: auto;
    z-index: 1000;
    transform: translateY(100%);
    transition: transform 0.3s ease-out;
  }

  .flow-form.show {
    transform: translateY(0);
  }

  .flow-form-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
  }

  .flow-form-overlay.show {
    opacity: 1;
    visibility: visible;
  }

  .overall-percentage {
    text-align: center;
    font-size: 24px;
    margin-bottom: 20px;
  }

  .diamond-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    gap: 60px; /* Increased from 40px to 60px */
    width: 400px; /* Increased from 340px to accommodate the larger gap */
    height: 400px; /* Increased from 340px to accommodate the larger gap */
    margin: 40px auto;
  }

  .diamond-square {
    width: 140px; /* Decreased from 150px */
    height: 140px; /* Decreased from 150px */
    background-color: #2c2c2c;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transform: rotate(45deg);
    cursor: pointer;
    transition: background-color 0.3s;
    color: #ffffff;
  }

  .diamond-square:nth-child(1) { /* Flow */
    grid-column: 1 / 3;
    grid-row: 1 / 2;
    justify-self: center;
    align-self: start;
  }

  .diamond-square:nth-child(2) { /* Build */
    grid-column: 2 / 3;
    grid-row: 1 / 3;
    justify-self: end;
    align-self: center;
  }

  .diamond-square:nth-child(3) { /* Become */
    grid-column: 1 / 3;
    grid-row: 2 / 3;
    justify-self: center;
    align-self: end;
  }

  .diamond-square:nth-child(4) { /* Be */
    grid-column: 1 / 2;
    grid-row: 1 / 3;
    justify-self: start;
    align-self: center;
  }

  .diamond-square span {
    transform: rotate(-45deg);
    text-align: center;
  }

  .square-title {
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 0.8rem; /* Decreased from 0.9rem */
  }

  .square-percentage {
    font-size: 1.1rem; /* Decreased from 1.2rem */
  }
</style>
