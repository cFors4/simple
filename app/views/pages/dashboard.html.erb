<div class="<%= @page_class %>">
  <nav class="dashboard-tabs" id="dashboardTabs">
    <div class="dashboard-tabs-container">
      <button id="prevTab" class="nav-arrow">&larr;</button>
      <ul>
        <li data-tab="aware-agency">
          <span class="tab-text">Aware Agency</span>
          <i class="fas fa-compass tab-icon"></i>
        </li>
        <li data-tab="flow">
          <span class="tab-text">Flow</span>
          <i class="fas fa-water tab-icon"></i>
        </li>
        <li data-tab="build">
          <span class="tab-text">Build</span>
          <i class="fas fa-hammer tab-icon"></i>
        </li>
        <li data-tab="become">
          <span class="tab-text">Become</span>
          <i class="fas fa-heart tab-icon"></i>
        </li>
        <li data-tab="be">
          <span class="tab-text">Be</span>
          <i class="fas fa-om tab-icon"></i>
        </li>
      </ul>
      <button id="nextTab" class="nav-arrow">&rarr;</button>
    </div>
  </nav>

  <div class="dashboard-content">
    <div id="aware-agency" class="tab-content active">
      <%= render partial: 'pages/dashboard_aware_agency' %>
    </div>
    <div id="flow" class="tab-content">
      <%= render partial: 'pages/dashboard_flow' %>
    </div>
    <div id="build" class="tab-content">
      <%= render partial: 'pages/dashboard_build' %>
    </div>
    <div id="become" class="tab-content">
      <%= render partial: 'pages/dashboard_become' %>
    </div>
    <div id="be" class="tab-content">
      <%= render partial: 'pages/dashboard_be' %>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  let isInitialized = false;

  function initializeDashboard() {
    if (isInitialized) return;
    isInitialized = true;

    const tabs = document.querySelectorAll('.dashboard-tabs li');
    const tabContents = document.querySelectorAll('.tab-content');
    const prevButton = document.getElementById('prevTab');
    const nextButton = document.getElementById('nextTab');
    const contextSection = document.getElementById('context-section');
    let currentTabIndex = parseInt(localStorage.getItem('currentTabIndex')) || 0;

    function updateActiveTab() {
      tabs.forEach((tab, index) => {
        if (index === currentTabIndex) {
          tab.classList.add('active');
          tabContents[index].classList.add('active');
          initializeSideMenu(tab.getAttribute('data-tab'));
        } else {
          tab.classList.remove('active');
          tabContents[index].classList.remove('active');
        }
      });
      localStorage.setItem('currentTabIndex', currentTabIndex);
    }

    prevButton.addEventListener('click', function() {
      currentTabIndex = (currentTabIndex - 1 + tabs.length) % tabs.length;
      updateActiveTab();
    });

    nextButton.addEventListener('click', function() {
      currentTabIndex = (currentTabIndex + 1) % tabs.length;
      updateActiveTab();
    });

    tabs.forEach((tab, index) => {
      tab.addEventListener('click', function() {
        currentTabIndex = index;
        updateActiveTab();
      });
    });

    updateActiveTab();

    // Diamond square click handling
    const diamondSquares = document.querySelectorAll('.diamond-square');
    diamondSquares.forEach(square => {
      square.addEventListener('click', function() {
        const tabName = this.getAttribute('data-tab');
        const tabIndex = Array.from(tabs).findIndex(tab => tab.getAttribute('data-tab') === tabName);
        if (tabIndex !== -1) {
          currentTabIndex = tabIndex;
          updateActiveTab();
        }
      });
    });

    // Function to update percentages (placeholder)
    function updatePercentages() {
      const overallPercentage = document.getElementById('overallPercentage');
      const squarePercentages = document.querySelectorAll('.square-percentage');
      
      // Placeholder: Generate random percentages
      const randomPercentage = () => Math.floor(Math.random() * 101);
      
      overallPercentage.textContent = randomPercentage();
      squarePercentages.forEach(span => {
        span.textContent = `${randomPercentage()}%`;
      });
    }

    // Update percentages on page load (for demonstration)
    updatePercentages();

    // Initialize flow, be, and build dashboard states
    initializeFlowDashboard();
    initializeBeDashboard();
    initializeBuildDashboard();
  }

  function getHeaderOffset() {
    const header = document.querySelector('.dashboard-tabs');
    return header ? header.offsetHeight : 0;
  }

  function initializeSideMenu(tabId) {
    console.log(`Initializing side menu for ${tabId}...`);
    const tabContent = document.getElementById(tabId);
    const menuLinks = tabContent.querySelectorAll('.floating-side-menu a');
    console.log('Number of menu links:', menuLinks.length);
    menuLinks.forEach(link => {
      console.log('Link href:', link.getAttribute('href'));
      link.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href').substring(1);
        const targetElement = tabContent.querySelector(`#${targetId}`);
        if (targetElement) {
          console.log('Scrolling to:', targetId);
          const headerOffset = getHeaderOffset();
          const elementPosition = targetElement.getBoundingClientRect().top;
          const offsetPosition = elementPosition + window.pageYOffset - headerOffset;

          window.scrollTo({
            top: offsetPosition,
            behavior: 'smooth'
          });
        } else {
          console.log('Target element not found:', targetId);
        }
      });
    });
  }

  function initializeAllSideMenus() {
    const tabIds = ['aware-agency', 'flow', 'build', 'become', 'be'];
    tabIds.forEach(tabId => initializeSideMenu(tabId));
  }

  // Call initializeDashboard when the page loads
  document.addEventListener('DOMContentLoaded', initializeDashboard);

  // Re-initialize side menus when switching tabs
  document.addEventListener('DOMContentLoaded', function() {
    const tabs = document.querySelectorAll('.dashboard-tabs li');
    tabs.forEach(tab => {
      tab.addEventListener('click', function() {
        const tabId = this.getAttribute('data-tab');
        initializeSideMenu(tabId);
      });
    });
  });

  function initializeFlowDashboard() {
    const flowHeuristics = document.querySelectorAll('#flow .flow-heuristic input');
    const flowPercentage = document.getElementById('flowPercentage');
    const progressTriangle = document.getElementById('progressTriangle');
    const vibrantPercentage = document.getElementById('vibrantPercentage');
    const priorityPercentage = document.getElementById('priorityPercentage');
    const bottleneckPercentage = document.getElementById('bottleneckPercentage');

    function updateFlowDashboard() {
      let total = 0;
      flowHeuristics.forEach((heuristic, index) => {
        total += parseInt(heuristic.value);
        heuristic.nextElementSibling.textContent = heuristic.value + '%';
      });
      const average = total / flowHeuristics.length;
      flowPercentage.textContent = Math.round(average) + '%';

      // Update the triangle
      const height = 180 * (average / 100);
      progressTriangle.setAttribute('points', `100,10 ${100 - height / 2},${10 + height} ${100 + height / 2},${10 + height}`);

      // Update other metrics
      vibrantPercentage.textContent = Math.round(average);
      priorityPercentage.textContent = Math.round(Math.random() * 100);
      bottleneckPercentage.textContent = Math.round(Math.random() * 100);
    }

    flowHeuristics.forEach(heuristic => {
      heuristic.addEventListener('input', updateFlowDashboard);
    });

    updateFlowDashboard();

    // Flow Goal functionality
    const flowGoalInput = document.getElementById('flowGoal');
    const currentFlowGoal = document.getElementById('currentFlowGoal');
    const saveGoalButton = document.querySelector('#flow button');

    function saveFlowGoal() {
      const goal = flowGoalInput.value;
      if (goal) {
        currentFlowGoal.textContent = `Current Goal: ${goal}`;
        localStorage.setItem('flowGoal', goal);
      }
    }

    // Load saved goal on page load
    const savedGoal = localStorage.getItem('flowGoal');
    if (savedGoal) {
      currentFlowGoal.textContent = `Current Goal: ${savedGoal}`;
    }

    saveGoalButton.addEventListener('click', saveFlowGoal);
  }

  function initializeBeDashboard() {
    const beHeuristics = document.querySelectorAll('#be .heuristic input');
    const centerPercentage = document.getElementById('centerPercentage');
    const progressCircle = document.getElementById('progressCircle');

    function updateBeDashboard() {
      let total = 0;
      beHeuristics.forEach((heuristic) => {
        total += parseInt(heuristic.value);
        heuristic.nextElementSibling.textContent = heuristic.value + '%';
      });
      const average = total / beHeuristics.length;
      centerPercentage.textContent = Math.round(average) + '%';

      // Update the circle
      const circumference = 2 * Math.PI * 90;
      const offset = circumference - (average / 100) * circumference;
      progressCircle.style.strokeDasharray = `${circumference} ${circumference}`;
      progressCircle.style.strokeDashoffset = offset;

      // Update other metrics in the metrics section
      const investmentRatio = document.getElementById('investmentRatio');
      const operationalEfficiency = document.getElementById('operationalEfficiency');
      const observationMoments = document.getElementById('observationMoments');

      if (investmentRatio) investmentRatio.textContent = (average / 100).toFixed(1);
      if (operationalEfficiency) operationalEfficiency.textContent = Math.round(average);
      if (observationMoments) observationMoments.textContent = Math.round(average * 10);
    }

    beHeuristics.forEach(heuristic => {
      heuristic.addEventListener('input', updateBeDashboard);
    });

    updateBeDashboard();
  }

  function initializeBuildDashboard() {
    const buildHeuristics = document.querySelectorAll('#build .build-diamond .diamond-square');
    const buildOverallPercentage = document.getElementById('buildOverallPercentage');

    function updateBuildDashboard() {
      let total = 0;
      buildHeuristics.forEach((heuristic) => {
        const percentage = Math.floor(Math.random() * 101);
        heuristic.querySelector('.square-percentage').textContent = `${percentage}%`;
        total += percentage;
      });
      const average = Math.round(total / buildHeuristics.length);
      buildOverallPercentage.textContent = average;
    }

    updateBuildDashboard();

    // Build Goal functionality
    const buildGoalInput = document.getElementById('buildGoal');
    const currentBuildGoal = document.getElementById('currentBuildGoal');
    const saveGoalButton = document.querySelector('#build .overarching-build-goal button');

    function saveBuildGoal() {
      const goal = buildGoalInput.value;
      if (goal) {
        currentBuildGoal.textContent = `Current Goal: ${goal}`;
        localStorage.setItem('buildGoal', goal);
      }
    }

    // Load saved goal on page load
    const savedGoal = localStorage.getItem('buildGoal');
    if (savedGoal) {
      currentBuildGoal.textContent = `Current Goal: ${savedGoal}`;
    }

    saveGoalButton.addEventListener('click', saveBuildGoal);
  }

  // Add this new function to handle the floating tab bar
  function initFloatingTabBar() {
    const tabBar = document.getElementById('dashboardTabs');
    const tabBarOffset = tabBar.offsetTop;
    const headerHeight = 60; // Adjust this value based on your application header height

    function updateTabBarPosition() {
      if (window.innerWidth <= 768) {
        tabBar.classList.add('floating');
        document.body.style.paddingBottom = `${tabBar.offsetHeight}px`;
        tabBar.style.top = 'auto';
        tabBar.style.bottom = '0';
      } else {
        if (window.pageYOffset > tabBarOffset - headerHeight) {
          tabBar.classList.add('floating');
          tabBar.style.top = `${headerHeight}px`;
          tabBar.style.bottom = 'auto';
          document.body.style.paddingTop = `${tabBar.offsetHeight}px`;
        } else {
          tabBar.classList.remove('floating');
          tabBar.style.top = 'auto';
          tabBar.style.bottom = 'auto';
          document.body.style.paddingTop = '0';
        }
      }
    }

    window.addEventListener('scroll', updateTabBarPosition);
    window.addEventListener('resize', updateTabBarPosition);
    updateTabBarPosition(); // Initial call to set correct position
  }

  // Call the new function when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeDashboard();
    initFloatingTabBar();
  });
</script>

<style>
  body {
    background-color: #000000;
    color: #ffffff;
  }

  .dashboard-tabs {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 10px;
    background-color: #1e1e1e;
    padding: 10px 0;
    transition: all 0.3s ease;
    width: 100%;
    z-index: 999;
  }

  .dashboard-tabs.floating {
    position: fixed;
    top: 60px;
    left: 0;
    right: 0;
  }

  .dashboard-tabs-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 800px;
  }

  .dashboard-tabs ul {
    display: flex;
    list-style-type: none;
    padding: 0;
    margin: 0;
    justify-content: center;
    flex: 1;
  }

  .dashboard-tabs li {
    margin: 0 10px;
    padding: 10px;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    color: #ffffff;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  .dashboard-tabs li.active {
    border-bottom-color: #64b5f6;
  }

  .nav-arrow {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    padding: 0 10px;
    color: #ffffff;
  }

  .tab-icon {
    display: none;
    font-size: 24px;
    margin-bottom: 5px;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .flow-visualization {
    margin-top: 30px;
  }

  #flowChart {
    max-width: 600px;
    margin: 0 auto;
  }

  .flow-form {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background-color: white;
    padding: 20px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.1);
    max-height: 60vh;
    overflow-y: auto;
    z-index: 1000;
    transform: translateY(100%);
    transition: transform 0.3s ease-out;
  }

  .flow-form.show {
    transform: translateY(0);
  }

  .flow-form-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0,0,0,0.5);
    z-index: 999;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease-out, visibility 0.3s ease-out;
  }

  .flow-form-overlay.show {
    opacity: 1;
    visibility: visible;
  }

  .overall-percentage {
    text-align: center;
    font-size: 24px;
    margin-bottom: 10px;
  }

  .diamond-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    gap: 40px;
    width: 360px;
    height: 360px;
    margin: 20px auto;
  }

  .diamond-square {
    width: 140px;
    height: 140px;
    background-color: #2c2c2c;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    transform: rotate(45deg);
    cursor: pointer;
    transition: background-color 0.3s;
    color: #ffffff;
  }

  .diamond-square:nth-child(1) {
    grid-column: 1 / 3;
    grid-row: 1 / 2;
    justify-self: center;
    align-self: start;
  }

  .diamond-square:nth-child(2) {
    grid-column: 2 / 3;
    grid-row: 1 / 3;
    justify-self: end;
    align-self: center;
  }

  .diamond-square:nth-child(3) {
    grid-column: 1 / 3;
    grid-row: 2 / 3;
    justify-self: center;
    align-self: end;
  }

  .diamond-square:nth-child(4) {
    grid-column: 1 / 2;
    grid-row: 1 / 3;
    justify-self: start;
    align-self: center;
  }

  .diamond-square span {
    transform: rotate(-45deg);
    text-align: center;
  }

  .square-title {
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 0.8rem;
  }

  .square-percentage {
    font-size: 1.1rem;
  }

  .ceim-image {
    display: block;
    max-width: 100%;
    height: auto;
    margin: 20px auto;
  }

  .dashboard-content {
    background-color: #000000;
    color: #ffffff;
    padding-top: 10px;
  }

  .dashboard-section {
    background-color: #1e1e1e;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 15px;
    color: #ffffff;
  }

  .dashboard-tabs-container {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
  }

  .dashboard-tabs ul {
    flex: 1;
    max-width: 600px;
  }

  .dashboard-section, .graph {
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  @media (max-width: 768px) {
    .dashboard-tabs {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      top: auto;
      margin-bottom: 0;
      padding: 5px 0;
      box-shadow: 0 -2px 5px rgba(0, 0, 0, 0.1);
      background-color: #1e1e1e;
      height: 50px; /* Doubled the height */
    }

    .dashboard-tabs-container {
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      height: 100%; /* Make sure the container takes full height */
    }

    .dashboard-tabs ul {
      display: flex;
      flex-direction: row;
      justify-content: space-around;
      width: 100%;
      padding: 0;
      margin: 0;
      flex: 1;
      height: 100%; /* Make sure the ul takes full height */
    }

    .dashboard-tabs li {
      margin: 0;
      padding: 5px;
      flex: 1;
      text-align: center;
      border-bottom: none;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center; /* Center content vertically */
      height: 100%; /* Make sure each li takes full height */
    }

    .tab-text {
      display: none;
    }

    .tab-icon {
      display: block;
      font-size: 36px; /* Increased icon size */
      margin-bottom: 5px;
    }

    .dashboard-tabs li.active {
      border-bottom: none;
      color: #64b5f6;
    }

    body {
      padding-bottom: 120px; /* Adjusted to match new tab bar height */
    }

    .dashboard-content {
      margin-bottom: 120px; /* Adjusted to match new tab bar height */
    }

    .nav-arrow {
      display: block;
      font-size: 24px; /* Increased arrow size */
      padding: 0 15px;
    }
  }
</style>